//ЛАБОРАТОРНАЯ РАБОТА №1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

/*Объявить вещественные переменные a, b и с и задать их значения. 
Предполагая, что a, b, c есть коэффициенты квадратного уравнения вывести на консоль значения их корней х1, х2. 
Следует подобрать такие значения коэффициентов, при которых корни будут существовать.*/

int main(int argc, char *argv[]) {
  printf("This program will help you solve quadratic equations!\n");
  double a;
  double b;
  double c;
  double x;
  double x1;
  double x2;
  double D;
  int y=0;
  
  do{
  
  printf("Enter a: ");
  scanf("%lf", &a);
  
  printf("Enter b: ");
  scanf("%lf", &b);
  
  printf("Enter c: ");
  scanf("%lf", &c);  
  
  D=pow(b,2)-4*a*c;
  printf("Discriminant = %lf\n", D);
  
  if (D>0)
  { 
    x1 = (-b + sqrt(D)) / (2 * a); 
    x2 = (-b - sqrt(D)) / (2 * a); 
    printf ("X1 = %lf \nX2 = %lf", x1,x2);
  }
  	else if (D==0)
  {
    x = -b / (2 * a); 
    printf ("X = %lf", x);
  }
  
  	else 
  {
    printf("The discriminant is negative, there are no roots\n");
  }
  
  printf("1-prodolzit any other key - exit\n");
  scanf("%d", &y);
  if (y!=1)
  {
  	break;
  }
  }while (1==y);
  

    return 0;
}





//ЛАБОРАТОРНАЯ РАБОТА №2

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

/*
Объявить массив данных типа double размером 3 на 3.
Ввести с консоли его значения, 
вывести на консоль сумму его элементов, расположенных на главной диагонали
сумму элементов, расположенных на  побочной диагонали.
Объявить массив данных типа int размером 2 на 2. 
Ввести с консоли его значе-ния
вывести на консоль квадрат данной матрицы.
*/

int main() {
// Обработка массива double
//ЗАДАЧА 1
  double sum1 = 0; // Объявляем и инициализируем переменную для суммы главной диагонали
  double sum2 = 0;// Объявляем и инициализируем переменную для суммы побочной диагонали
  int i, j;       // Объявляем переменные для индексов циклов
  int n;         // Объявляем переменную для размера матрицы (n x n)
  int N;         // Объявляем переменную для общего количества элементов (n*n)
  int k;         //Объявляем переменную k

  printf("Enter the size of the matrix: "); // Выводим запрос на ввод размера
  scanf("%d", &n);                          // Считываем размер матрицы с клавиатуры

  double a[n][n]; // Объявляем двумерный массив (матрицу) типа double.

  N = pow(n, 2); // Вычисляем общее количество элементов в матрице: n * n
  printf("Enter %d numbers for the array int:\n", N); // Выводим запрос на ввод элементов

  // Ввод элементов матрицы с клавиатуры
  for (i = 0; i < n; i++)   // Перебираем строки
    for (j = 0; j < n; j++) // Перебираем столбцы
      scanf("%lf", &a[i][j]); // Считываем элемент и сохраняем в матрицу a[i][j]

  // Вычисление сумм диагоналей
  for (i = 0; i < n; i++) {               // Перебираем строки
    sum1 += a[i][i];                         // Добавляем элемент главной диагонали (строка == столбец) к sum1
    sum2 += a[i][(n - 1) - i];                // Добавляем элемент побочной диагонали к sum2
                                             // (сумма индексов строки и столбца = n - 1)
  }

  printf("The sum of the main diagonal: %.2lf\n",sum1); // Выводим сумму главной диагонали с двумя знаками после запятой
  printf("The sum of the side diagonal: %.2lf\n",sum2); // Выводим сумму побочной диагонали с двумя знаками после запятой

 //МАТРИЦА 2

  printf("Enter the size of the matrix: "); // Снова запрашиваем размер матрицы (может быть другим)
  scanf("%d", &n);                          // Считываем размер матрицы

  int b[n][n], c[n][n]; // Объявляем две матрицы целых чисел: b - исходная, c - результат

  N = pow(n, 2); // Пересчитываем общее количество элементов для новой матрицы

  printf("Enter %d numbers for the array int:\n", N); // Выводим запрос на ввод элементов матрицы b

  // Ввод элементов матрицы b
  for (i = 0; i < n; i++) {   // Перебираем строки
    for (j = 0; j < n; j++) { // Перебираем столбцы
      scanf("%d", &b[i][j]); // Считываем элемент и сохраняем в матрицу b[i][j]
    }
  }

  // Вычисление произведения матрицы b на саму себя (возведение в квадрат)
  for (i = 0; i < n; i++) {    // Перебираем строки результирующей матрицы c
    for (j = 0; j < n; j++) {  // Перебираем столбцы результирующей матрицы c
      c[i][j] = 0;           // Важно: Инициализируем элемент c[i][j] нулем!
      for (k = 0; k < n; k++) { // Перебираем элементы для вычисления произведения
        c[i][j] += b[i][k] *
                   b[k][j]; // Вычисляем элемент c[i][j] по формуле умножения матриц
      }
    }
  }

  printf("\n"); // Выводим две пустые строки для разделения вывода

  // Вывод полученной матрицы c
  for (i = 0; i < n; i++) {    // Перебираем строки
    for (j = 0; j < n; j++) {  // Перебираем столбцы
      printf("%d ", c[i][j]); // Выводим элемент c[i][j] с пробелом
    }
    printf("\n"); // Переходим на новую строку после каждой строки матрицы
  }

  return 0;
}
